{"version":3,"sources":["plantGenerator.ts"],"names":[],"mappings":"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","file":"plantGenerator.js","sourcesContent":["//canopies number of leaf sections, height of tree, materials\n// https://www.babylonjs-playground.com/#LG3GS#93\n// https://github.com/BabylonJS/Extensions/tree/master/TreeGenerators/SimplePineGenerator\nfunction PineGenerator(canopies: number, height: number, width: number,\n                       trunkMaterial: BABYLON.StandardMaterial,\n                       leafMaterial: BABYLON.StandardMaterial,\n                       scene: BABYLON.Scene) : BABYLON.Mesh\n{\n  let nbL = canopies + 1;\n  let trunkLen = height / nbL;\n  let curvePoints = function(l, t) {\n    let path = [];\n    let step = l / t;\n    for (let i = trunkLen; i < l + trunkLen; i += step) {\n      path.push(new BABYLON.Vector3(0, i, 0));\n      path.push(new BABYLON.Vector3(0, i, 0));\n    }\n    return path;\n  };\n\n  let curve = curvePoints(height, nbL);\n\n  let radiusFunction = function(i, distance) {\n    let fact = 1;\n    if (i % 2 == 0) { fact = .5; }\n    let radius =  Math.max(0, (nbL * 2 - i - 1) * fact);\n    return radius;\n  };\n\n  let leaves = BABYLON.Mesh.CreateTube(\n    \"leaves\", curve, 0, 10, radiusFunction, BABYLON.Mesh.CAP_ALL, scene);\n  leaves.scaling.x = width / 10;\n  leaves.scaling.z = width / 10;\n\n  let trunk = BABYLON.Mesh.CreateCylinder(\n    \"trunk\", height / nbL, nbL * 1.5 - nbL / 2 - 1, nbL * 1.5 - nbL / 2 - 1, 12, 1, scene);\n  trunk.position.y = trunkLen / 2;\n  trunk.scaling.x = width / 10;\n  trunk.scaling.z = width / 10;\n\n  leaves.material = leafMaterial;\n  trunk.material = trunkMaterial;\n\n  let tree = BABYLON.Mesh.CreateBox(\"pine\", 1, scene);\n  tree.isVisible = false;\n  leaves.parent = tree;\n  trunk.parent = tree;\n  return tree;\n}\n\nfunction QuickTreeGenerator(sizeBranch: number,\n                            sizeTrunk: number,\n                            radius: number,\n                            trunkMaterial: BABYLON.StandardMaterial,\n                            leafMaterial: BABYLON.StandardMaterial,\n                            scene: BABYLON.Scene) : BABYLON.Mesh {\n    let leaves = new BABYLON.Mesh(\"leaves\", scene);\n\n    let vertexData = BABYLON.VertexData.CreateSphere({segments: 2, diameter: sizeBranch});\n\n    vertexData.applyToMesh(leaves, false);\n\n    let positions = leaves.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n    let indices = leaves.getIndices();\n    let numberOfPoints = positions.length / 3;\n\n    let map = [];\n\n    let v3 = BABYLON.Vector3;\n    for (let i = 0; i < numberOfPoints; i++) {\n        let p = new v3(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]);\n\n        let found = false;\n        for (let index = 0; index < map.length && !found; index++) {\n            let array = map[index];\n            let p0 = array[0];\n            if (p0.equals (p) || (p0.subtract(p)).lengthSquared() < 0.01) {\n                array.push(i * 3);\n                found = true;\n            }\n        }\n        if (!found) {\n            let array = [];\n            array.push(p, i * 3);\n            map.push(array);\n        }\n\n    }\n    let randomNumber = function(min, max) {\n        if (min == max) {\n            return (min);\n        }\n        let random = Math.random();\n        return ((random * (max - min)) + min);\n    };\n\n    map.forEach(function(array) {\n        let index, min = -sizeBranch / 10, max = sizeBranch / 10;\n        let rx = randomNumber(min, max);\n        let ry = randomNumber(min, max);\n        let rz = randomNumber(min, max);\n\n        for (index = 1; index < array.length; index++) {\n            let i = array[index];\n            positions[i] += rx;\n            positions[i + 1] += ry;\n            positions[i + 2] += rz;\n        }\n    });\n\n    leaves.setVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\n    let normals = [];\n    BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n    leaves.setVerticesData(BABYLON.VertexBuffer.NormalKind, normals);\n    leaves.convertToFlatShadedMesh();\n\n    leaves.material = leafMaterial;\n    leaves.position.y = sizeTrunk + sizeBranch / 2 - 2;\n\n    let trunk = BABYLON.Mesh.CreateCylinder(\n      \"trunk\", sizeTrunk, radius - 2 < 1 ? 1 : radius - 2, radius, 10, 2, scene);\n\n    trunk.position.y = sizeTrunk / 2;\n\n    trunk.material = trunkMaterial;\n    trunk.convertToFlatShadedMesh();\n\n    let tree = BABYLON.Mesh.CreateBox(\"tree\", 1, scene);\n    tree.isVisible = false;\n    leaves.parent = tree;\n    trunk.parent = tree;\n    return tree;\n}\n\nfunction QuickShrub(sizeBranch: number,\n                    leafMaterial: BABYLON.StandardMaterial,\n                    scene: BABYLON.Scene) : BABYLON.Mesh {\n    let tree = new BABYLON.Mesh(\"shrub\", scene);\n    tree.isVisible = false;\n\n    let leaves = new BABYLON.Mesh(\"leaves\", scene);\n\n    let vertexData = BABYLON.VertexData.CreateSphere({segments: 2, diameter: sizeBranch});\n\n    vertexData.applyToMesh(leaves, false);\n\n    let positions = leaves.getVerticesData(BABYLON.VertexBuffer.PositionKind);\n    let indices = leaves.getIndices();\n    let numberOfPoints = positions.length / 3;\n\n    let map = [];\n\n    let v3 = BABYLON.Vector3;\n    for (let i = 0; i < numberOfPoints; i++) {\n        let p = new v3(positions[i * 3], positions[i * 3 + 1], positions[i * 3 + 2]);\n\n        let found = false;\n        for (let index = 0; index < map.length && !found; index++) {\n            let array = map[index];\n            let p0 = array[0];\n            if (p0.equals(p) || (p0.subtract(p)).lengthSquared() < 0.01) {\n                array.push(i * 3);\n                found = true;\n            }\n        }\n        if (!found) {\n            let array = [];\n            array.push(p, i * 3);\n            map.push(array);\n        }\n    }\n    let randomNumber = function(min, max) {\n        if (min == max) {\n            return (min);\n        }\n        let random = Math.random();\n        return ((random * (max - min)) + min);\n    };\n\n    map.forEach(function(array) {\n      let index, min = -sizeBranch / 5, max = sizeBranch / 5;\n      let rx = randomNumber(min, max);\n      let ry = randomNumber(min, max);\n      let rz = randomNumber(min, max);\n\n      for (index = 1; index < array.length; index++) {\n        let i = array[index];\n        positions[i] += rx;\n        positions[i + 2] += rz;\n        if (positions[i + 1] < 0) {\n          positions[i + 1] = -sizeBranch / 2;\n        } else {\n          positions[i + 1] += ry;\n        }\n      }\n    });\n\n    leaves.setVerticesData(BABYLON.VertexBuffer.PositionKind, positions);\n    let normals = [];\n    BABYLON.VertexData.ComputeNormals(positions, indices, normals);\n    leaves.setVerticesData(BABYLON.VertexBuffer.NormalKind, normals);\n    leaves.convertToFlatShadedMesh();\n\n    leaves.material = leafMaterial;\n    leaves.scaling.y = randomNumber(0.2, 1);\n    leaves.position.y = 0.1 + leaves.scaling.y * sizeBranch / 2;\n\n    leaves.parent = tree;\n    return tree;\n}\n"],"sourceRoot":"./"}